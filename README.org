-*- mode:org ; mode:visual-line -*-

This is the source for my blog.

Although I developed (and still intend to maintain) Frog, I wanted to experiment with a different approach.

* Philosophy
Greenspun's Tenth Rule applied to static blog generators is ~make~.

A blog generator used by Racket programmers needn't have code to deal with configuration, customization, or templates. Instead, just change the code to do what you want.

* General
The heart of this is the ~Makefile~.

As with Frog, this uses a "compile and link" metaphor.

** "Compile"
- Blog post source ~$(src)/posts/*.md~ files are "compiled" into ~$(cache)/*.rktd~ files. These files have some meta-data plus an ~xexpr~ representing the /body/ of the post.
- Each ~.rktd~ pathname is appended to a ~$(cache)/tags/{tag-name}~.
** "Link"
- Generate the complete ~.html~ pages for posts.
- Generate feeds and index pages for tags.
- Generate ~$(src)/non-posts/*.md~.
** Advantages
- Changes to the overall page (e.g. updating a copyright in the footer) can be done without rebuilding the posts from scratch. This particularly helps when the posts are enhanced with things like syntax highlighting and automatic links to Racket docs.
- As already mentioned, this allows a tags "database" to be made at the same time.

* TO-DO

** TODO Maybe stop depending on frog/{enhance-body paths}
- Split out from frog to new pkgs?
- Also, the pygmentize stuff for frog spawns a long-running python process, which makes frog faster, but won't help us (in fact it may hurt a little).

** TODO Maybe create new example repo named "tadpole"
- With whatever is left after doing the previous item.
- Replace my real ~src~ with some example content (e.g. from Frog).
- Share as a repo (not a package) in case anyone else wants to fork it and do what they want.
